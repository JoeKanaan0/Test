

                                                                        Advanced Data Structures


- A data structure is a way of organizing data so that it can used effectively.

- We use data structures because they are essential ingredients in creating fast and powerful algorithims.

- They help to manage and organize data.

- They make code cleaner and easier to understand.

1. Abstract Data Types

- Abstract Data Type : An abstact data type (ADT) is an abstraction of a data structure which provides only the interface to which a data structure must adhere to.

- The interface does not give any specific details about how something should be implemented or in what programming language.

Example : Suppose that the abstract data type is for motive transportation to get from point A to point B. As we know there are many modes of transportation to get 
	from point A to point B so which one do you choose? The data structure does that job while the abstract data structure tells us to go from A to B.

Example 2 :

    Abtraction (ADT)            Implementation (DS)

	List	                  Dynamic Array
				   Linked List

	Queue			Linked List based Queue
                                   Array based Queue 
				   Stack based Queue

        Map                          Tree Map
				Hash Map / Hash Table	

       Vehicle                       Golf Cart
				      Bicycle 
				     Smart Car	


2. Computational Complexity Analysis

- Generally the two most asked questions are:

	- How much time does this algorithm need to finish.

	- How much space does this algorithm need fo its computation.

- We use the Big-O Notation to determine tha time complexity equations of a certain program. We always choose the worst case scenario to judge the program.

- The Big-O notation time complexity equations :

	- Constant Time : O(1)

	- Logarithmic Time : O(log(n))

	- Linear Time : O(n)

	- Linearithmic Time : O(nlog(n))

	- Quadric Time : O(n^2)

	- Cubic Time : O(n^3)

	- Exponential Time : O(b^n) , b > 1

	- Factorial Time : O(n!)

- Big-O Properties :

	 O(n + c) = O(n)           ( Supposed n is infinity)

	O(cn) = O(n) , c > 0
	
	- Let f be a function that describes the running time of a particular algorithm for an input of size n:

	- f(n) = 7log(n^3) + 15n^2 + 2n^3 + 8 

        - The Big0O notation of f(n) would be O(f(n)) = O(n^3). Since O(n^3) is biggest most dominant term of this function.

- Big-O Examples:

	- The following run in constant time : O(1)

		- a := 1
		
		- b := 2                     These three equations will tun in constant time since we are simply doing a simple mathematical equal which only takes
					     	one operation.
		- c := a + 5*b

		- i := 0

		  While i < 11 Do            Here we are doing a loop but the loop itself doesn't depend on n so it will run in constant time. 

			i = i + 1

	- The following run in Linear time : O(n)

		- i := 0                           

		  While i < n Do 		f(n) = n   Therefore O(f(n)) = O(n)
 	
		  	i = i +1

		- i := 0

		  While i < n Do		f(n) = n/3  Therefore O(f(n)) = O(n)

			i = i + 3

- Both of the following tun in quadratic time. The first may be obvious since n work done n times is n*n = O(n^2), but what about the second one?

	- For (i := 0 ; i < n; i = i + 1)

		For (j := 0; j < n; j = j + 1)

	- For ( i:= 0 ; i < n; i= i + 1)

		For (j := i; j < n; j = j + 1)

- For a moment just focus on the second loop. Since i goes from [0,n) the amount of amount of looping done is directly determined by what i is. Remark that if i = 0, we
	do n work, if i = 1, we do n-1 work, if i = 2 , we do n-2 work, etc...

- So the question then becomes what is : (n) + (n-1) + (n-2) + (n-3) + .... + 3 + 2 + 1?  Remarkably this turns out to be n(n+1)/2, so O(n(n+1)/2) = O(n^2)

- Suppose we have a sorted array and we want to find the index of aparticluar value in the array, if it exists. HWat is the time complexity of the following algorithims?

	low := 0 
	high := n-1
	While low <= high Do
	
		mid := (low + high) / 2

		If array[mid] == value : return mid		
		Else if array[mid] < value: lo = mid + 1
		Else If array[mid] > value: hi = mid - 1
	
	return -1 // Value not found

- The way this algorithm works is by looking in the middle of the array. If the value needed is higher is discards the lower half and continues the process until it
	finds the value.

- More examples : 

	i := 0

	While i < n Do

		j = 0

		While j < 3*n Do

			j = j + 1

		While j < 2*n Do

			j = j + 1

		i = i + 1 






























 